= TAP-Y Format

TAP-Y streams are a plain YAML streams.

An example of a TAP-Y stream looks like this:

  ---
  type: header
  count: 2
  range: 1..2
  ---
  type: case
  description: Subtraction
  ---
  type: test
  okay: pass
  file: foo.rb
  line: 45
  description: an important test
  returned: true
  expected: true
  source: ok 1, 2
  snippet: |
    ok 0,0
    ok 1,2
    ok 2,4
  ---
  type: test
  okay: fail
  file: foo.rb
  line: 46
  description: another test
  returned: false
  expected: true
  source: ok 2,4
  snippet: |
    ok 1,2
    ok 2,4

  message:
    blah blah
  extra:
    THAC0: 16
  ---
  type: footer
  time: 0.01
  count: 2
  tally:
    pass: 1
    fail: 1
    error: 0
    omit: 0
    pending: 0
  ...

== Fields

=== type

Each document must have a *type*. Valid types are `header`, `footer`, `case`,
`test` and `note`.

The `header` and `footer` types can only occur once, at the start and end of the
stream, respectively. All other types may occur repeatedly in between.

The `case` type marks the start of a testcase. All `test` (and `note`) 
documents following it are considered a part of the case until a new case
document occurs.

=== okay

The `okay` field designates the status of a test document. Valid values
are `pass`, `fail`, `error`, `omit` and `pending`.

In comparison to the classic TAP format, `pass` is equivalent to `ok` and 
`fail` and `error` are akin to `not ok`, where `fail` is "not ok" with regards
to a test assertion and `error` is "not ok" becuase of a raised coding error.

Tests with an `omit` status do not need to be provided in the document stream,
so this status will rarely appear in practice. But if producer chooses to do
so this status simply means the test is puposefully being disregarded.

While `pending`, on the other hand, means the test will be used in the future
but implementation has not been completed. It serves as reminder to developers
to write a missing test.

=== file

The `file` field provides the name of the file in which the test is defined.

=== line

The `line` field provides the line number of the the file on which the
definition of the test begins.

=== source

The `source` field is a verbatim copy of the source code that defines the test.
This may be just the first line of the definition/ In classic TAP this
is called `raw_test`.

=== snippet [DEPRECATED]

Much like `source`, but `snippet` can contain extra lines of code before and
after `line`. The snippet should always consist an odd number of lines with 
the `line` being in the center. If at the end or begining of a script pad
the snippet with blank lines to keep `line` in the center.

The `snippet` field is being deprecated, since the TAP consumer can use the
file and line to extract the source code if needed.

=== message

For types `fail` and `error` the message provides the explination for the
failure or error. Generally this is just the error message produced by
the underlying message. The `pass` type can have the message field too,
but it will generally be ignored by TAP consumers.

=== range [DEPRECATED?]

The range of tests being executed of the test suite. The range is written in
the form of `X..Y`. Where X is the index of the first test and Y is the index
of last test.

=== count

The `count` field provides the total number of tests being executed. It must
be given in the header and the footer.

=== extra

Additional data, not specifucally designated by this sepecification can
place it under this section without worry that future versions of the
specification will come into conflict with the field name.


