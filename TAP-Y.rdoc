= TAP-Y Format

TAP-Y is a plain YAML stream format.

A YAML stream is composed a sequence of YAML *documents*, each divided by
a start document marker (`---`).

An example of a TAP-Y stream looks like this:

  ---
  type: header
  count: 2
  range: 1..2
  ---
  type: case
  description: Subtraction
  ---
  type: test
  status: pass
  file: foo.rb
  line: 45
  description: an important test
  returned: true
  expected: true
  source: ok 1, 2
  snippet:
    44: ok 0,0
    45: ok 1,2
    46: ok 2,4
  ---
  type: test
  status: fail
  file: foo.rb
  line: 46
  description: another test
  returned: false
  expected: true
  source: ok 2,4
  snippet:
    45: ok 1,2
    46: ok 2,4
    47:
  message:
    blah blah
  extra:
    THAC0: 16
  ---
  type: footer
  time: 0.01
  count: 2
  tally:
    pass: 1
    fail: 1
    error: 0
    omit: 0
    pending: 0
  ...

As you can see TAP-Y streams provide a great deal of detail. They are not
intended for the end-user, but rather to pipe to consumer apps to process
into a human readable form.

== Fields

=== type

Each document must have a *type*. Valid types are `header`, `footer`, `case`,
`test` and `note`.

The `header` and `footer` types can only occur once, at the start and end of the
stream, respectively. All other types may occur repeatedly in between.

The `case` type marks the start of a testcase. All `test` (and `note`) 
documents following it are considered a part of the case until a new case
document occurs.

=== status

The `status` field designates the status of a test document. Valid values
are `pass`, `fail`, `error`, `omit` and `pending`.

In comparison to the classic TAP format, `pass` is equivalent to `ok` and 
`fail` and `error` are akin to `not ok`, where `fail` is "not ok" with regards
to a test assertion and `error` is "not ok" becuase of a raised coding error.

Tests with an `omit` status do not need to be provided in the document stream,
so this status will rarely appear in practice. But if producer chooses to do
so this status simply means the test is puposefully being disregarded.

While `pending`, on the other hand, means the test will be used in the future
but implementation has not been completed. It serves as reminder to developers
to write a missing test.

=== file

The `file` field provides the name of the file in which the test is defined.

=== line

The `line` field provides the line number of the the file on which the
definition of the test begins.

=== source

The `source` field is a verbatim copy of the source code that defines the test.
This may be just the first line of the definition/ In classic TAP this
is called `raw_test`.

=== snippet

The `snippet` field is a hash of line number mapped to source code of that line.
While `snippet` is much like `source` it also contains extra lines of code
before and after the test `line`.

The `snippet` field should always consist an odd number of lines, the same before
and after, the `line` being in the center, unless the line occurs at the
begining or the end of the file. The number of lines before and after is
arbitrary and up to the producer, but should be the same on either side.

=== message

For types `fail` and `error` the message provides the explination for the
failure or error. Generally this is just the error message produced by
the underlying message. The `pass` type can have the message field too,
but it will generally be ignored by TAP consumers.

=== range

The range of tests being executed of the test suite. The range is written in
the form of `X..Y`. Where X is the index of the first test and Y is the index
of last test.

NOTE: This may be deprecated since the count field suffices. A range can not
uniquely identify the tests being run in any case, so the first sentinal will
always be 1, which is redundant.

=== count

The `count` field provides the total number of tests being executed. It must
be given in the header and the footer.

=== tally

The footer must provide a tally for all status categories. This is like `count`
but broken down into status groups.

=== time

The footer should have the `time` elapsed in running the tests, given
in number of seconds.

=== extra

Additional data, not specifucally designated by this sepecification can
place under the `extra` section without worry that future versions of the
specification will come into conflict with the field name. The namespace
is a free-for-all, so use it with that in mind. Teh `extra` field can 
appear in any document.

